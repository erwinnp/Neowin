{
  "react function component ": {
    "prefix": "rfc",
    "body": "\n function ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}({${2}}) {\n\treturn (\n\t\t<div>\n\t\t\t${TM_FILENAME_BASE}\n\t\t</div>\n\t)\n} \n\n export default ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}",
    "description": "Creates a React component with props"
  },
  "react function component with props": {
    "prefix": "rfcp",
    "body": "\ntype ${1:Type} ={\n\t${2:val}: ${3}\n}\nexport default function ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}: React.FC<${1}>({${2}}) {\n\treturn (\n\t\t<div>\n\t\t\t{$2}\n\t\t</div>\n\t\t)\n\t}\n}\n\n",
    "description": "Creates a React component with props"
  },
  "reactFunctionComponent": {
    "prefix": "rfce",
    "body": "\n export default function ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}() {\n\treturn (\n\t\t<div>\n\t\t\t${TM_FILENAME_BASE}\n\t\t</div>\n\t)\n}",
    "description": "Creates a React functional component without PropTypes"
  },
  "arrowFunctionComponent": {
    "prefix": "rfcwp",
    "body": "\n export const ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div>\n\t\t\t${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}\n\t\t</div>\n\t)\n}",
    "description": "Creates a React functional component without PropTypes"
  },
  "arrowFunctionComponentSection": {
    "prefix": "rfce-section",
    "body": "\n export const ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<section>\n\t\t\t${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}\n\t\t</section>\n\t)\n}",
    "description": "Creates a React functional component without PropTypes"
  },
  "arrowFunctionComponentNav": {
    "prefix": "rfce-nav",
    "body": "\n export const ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<nav>\n\t\t\t${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}\n\t\t</nav>\n\t)\n}",
    "description": "Creates a React functional component without PropTypes"
  },
  "jsx element": {
    "prefix": "jj",
    "body": "<${1:elementName}>\n\t$0\n</${1}>",
    "description": "an element"
  },
  "jsx element self closed": {
    "prefix": "jc",
    "body": "<${1:elementName} />",
    "description": "an element self closed"
  },
  "jsx elements map": {
    "prefix": "jm",
    "body": "{${1:array}.map((item, id) => <div key={item.id}>\n\t$0\n</div>)}",
    "description": "an element self closed"
  },
  "jsx elements map with return": {
    "prefix": "jmr",
    "body": "{${1:array}.map((item, id) => {\n\treturn <div key={id}>\n\t$0\n</div>\n})}",
    "description": "an element self closed"
  },
  "useState": {
    "prefix": "us",
    "body": "const [${1:setterName}, set${1/(.*)/${1:/capitalize}/}] = useState(${2})$0",
    "description": "use state hook"
  },
  "useState any value": {
    "prefix": "us any",
    "body": "const [${1:val}, set${1}] = useState<null | ${2}>(null)",
    "description": "use state hook"
  },
  "useEffect": {
    "prefix": "ue",
    "body": ["useEffect(() => {", "\t$1", "}, [])$0"],
    "description": "React useEffect() hook"
  },
  "useEffect with cleanup": {
    "prefix": "uec",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\n\treturn () => {",
      "\t\t$2",
      "\t}",
      "}, [])$0"
    ],
    "description": "React useEffect() hook with a cleanup function"
  },
  "createContext": {
    "prefix": "cc",
    "body": [
      "export const $1 = createContext<$2>(",
      "\t(null as any) as $2",
      ")"
    ],
    "description": "creates a react context"
  },
  "useContext": {
    "prefix": "uc",
    "body": ["const $1 = useContext($2)$0"],
    "description": "React useContext() hook"
  },
  "useRef": {
    "prefix": "ur",
    "body": ["const ${1:elName}El = useRef(null)$0"],
    "description": "React useContext() hook"
  },
  "useCallback": {
    "prefix": "ucb",
    "body": [
      "const ${1:izedCallback} = useCallback(",
      "\t() => {",
      "\t\t${2:doSomething}(${3:a}, ${4:b})",
      "\t},",
      "\t[${5:a}, ${6:b}],",
      ")$0"
    ],
    "description": "React useCallback() hook"
  },
  "useMemo": {
    "prefix": "ume",
    "body": [
      "const ${1:izedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
    ],
    "description": "React useMemo() hook"
  },
  "Log warning to console": {
    "prefix": "clw",
    "body": ["console.warn($1);", "$0"],
    "description": "Log warning to the console"
  },
  "Log error to console": {
    "prefix": "clr",
    "body": ["console.error($1);", "$0"],
    "description": "Log error to the console"
  },
  "toggle menu navbar": {
    "prefix": "menu",
    "body": [
      "const [ menu, setMenu ] = useState(false)",
      "const handleMenu = (prev) => setMenu(!prev)"
    ]
  },
  "import env": {
    "prefix": "env vite",
    "body": "import.meta.env.$1"
  },
  "event click": {
    "prefix": "event-click",
    "body": "event: React.MouseEvent<HTMLButtonElement>"
  },
  "event prevent": {
    "prefix": "event prevent",
    "body": "event.preventDefault()"
  },
  "event form": {
    "prefix": "event-change-value",
    "body": "event: React.ChangeEvent<HTMLInputlement>"
  },
  "event setState": {
    "prefix": "event-setState",
    "body": "event: React.Dispatch<React.SetStateAction<State>>"
  },
  "addEventListener": {
    "prefix": "document-addListener",
    "body": "document.addEventListener('${1:event}', ${2:ev} => {\n\t${0}\n})"
  },
  "removeEventListener": {
    "prefix": "document-removeListener",
    "body": "document.removeEventListener('${1:event}', ${22:listener})"
  },
  "getElementById": {
    "prefix": "document-getClass",
    "body": "document.getElementById('${1:id}')"
  },
  "querySelector": {
    "prefix": "document-querySelector",
    "body": "document.querySelector('${1:selector}')"
  },
  "hook useInput create": {
    "prefix": "useInput create",
    "body": "import React, { useState } from \"react\"\n\nexport interface UseInput {\n\tvalue: string;\n\tonChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\nexport const useInput = (initial: string): UseInput => {\n\tconst [value, setValue] = useState(initial);\n\tconst onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetValue(event.target.value);\n\t}\n\t\n\treturn {\n\t\tvalue,\n\t\tonChange,\n\t}\n}"
  },
  "hook useInput store": {
    "prefix": "useInput store",
    "body": "import React from \"react\"\nimport { useInput } from \"${1}\"\n\nexport default function ${TM_FILENAME_BASE}(){\n\tconst nameInput = useInput(\"\")\n\tconst emailInput = useInput(\"\")\n\n\tconst handleSubmit = (event: React.FormEvent) => {\n\t\tevent.preventDefault();\n\n\t\tconsole.log(nameInput.value)\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input type=\"text\" {...nameInput} />\n\t\t\t<button>Submit</button>\n\t\t</form>\n\t)\n}"
  },
  "className": {
    "prefix": "className",
    "body": "className=\"${1}\""
  },
  "style": {
    "prefix": "style",
    "body": "style={${1}}"
  },
  "useFetch hook create": {
    "prefix": "useFetch-create",
    "body": "import { useState, useEffect } from \"react\"\n\ninterface Fetch {\n\tdata: any\n}\n\nexport const useFetch = (url: string) => {\n\tconst [data, setData] = useState<Fetch[]>([]);\n\tconst [loading, setLoading] = useState(true);\n\tconst [error, setError] = useState<any>(null);\n\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tconst res = await fetch(url);\n\t\t\t\tif (!res.ok) {\n\t\t\t\t\tthrow new Error(\"Fetch failed\");\n\t\t\t\t}\n\n\t\t\t\tconst data = await res.json();\n\n\t\t\t\tsetData(data);\n\t\t\t\tsetLoading(false);\n\t\t\t} catch (error) {\n\t\t\t\tsetError(error);\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t}\n\t\tfetchData();\n\t},[url]);\n\n\treturn {\n\t\tdata,\n\t\tloading,\n\t\terror,\n\t}\n}"
  },
  "useFetch hook store": {
    "prefix": "useFetch-store",
    "body": "export default function ${TM_FILENAME_BASE}(){\n\tconst { data, loading, error } = useFetch(\"${1}\")\n\tif (loading) {\n\t\t<p>loading</p>\n\t}\n\tif (error) {\n\t\t<p>{error}</p>\n\t}\n\tconsole.log(data)\n\n\treturn (\n\t\t<div>data</div>\n\t)\n}"
  },
  "onClick": {
    "prefix": "onclick",
    "body": "onClick={handle${1:}}",
    "description": "handle onClick events"
  },
  "onChange": {
    "prefix": "onchange",
    "body": "onChange={e => set${1:func}(e.target.value)}",
    "description": "handle onChange events"
  },
  "onSubmit": {
    "prefix": "onsubmit",
    "body": "onSubmit={handle${1:}}",
    "description": "handle onSubmit events"
  },
  "onKeyDown": {
    "prefix": "onkeydown",
    "body": "onKeyDown={handle${1:}}"
  },
  "onKeyUp": {
    "prefix": "onkeyup",
    "body": "onKeyUp={handle${1:}}"
  },
  "use client": {
    "prefix": "use-c",
    "body": "\"use client\""
  },
  "use server": {
    "prefix": "use-s",
    "body": "\"use server\""
  }
}
