{
  "Public Method Definition": {
    "prefix": "public method",
    "body": ["/**", " * ${1:name}", " */", "public ${1:name}() {", "\t$0", "}"],
    "description": "Public Method Definition"
  },
  "Private Method Definition": {
    "prefix": "private method",
    "body": ["private ${1:name}() {", "\t$0", "}"],
    "description": "Private Method Definition"
  },
  "Import external module.": {
    "prefix": "import statement",
    "body": ["import { $0 } from \"${1:module}\";"],
    "description": "Import external module."
  },
  "Property getter": {
    "prefix": "get",
    "body": [
      "",
      "public get ${1:value}() : ${2:string} {",
      "\t${3:return $0}",
      "}",
      ""
    ],
    "description": "Property getter"
  },
  "Log to the console": {
    "prefix": "cl",
    "body": ["console.log($1);", "$0"],
    "description": "Log to the console"
  },
  "Log warning to console": {
    "prefix": "cw",
    "body": ["console.warn($1);", "$0"],
    "description": "Log warning to the console"
  },
  "Log error to console": {
    "prefix": "cr",
    "body": ["console.error($1);", "$0"],
    "description": "Log error to the console"
  },
  "Define a full property": {
    "prefix": "prop",
    "body": [
      "",
      "private _${1:value} : ${2:string};",
      "public get ${1:value}() : ${2:string} {",
      "\treturn this._${1:value};",
      "}",
      "public set ${1:value}(v : ${2:string}) {",
      "\tthis._${1:value} = v;",
      "}",
      ""
    ],
    "description": "Define a full property"
  },
  "Triple-slash reference": {
    "prefix": "ref",
    "body": ["/// <reference path=\"$1\" />", "$0"],
    "description": "Triple-slash reference"
  },
  "Property setter": {
    "prefix": "set",
    "body": [
      "",
      "public set ${1:value}(v : ${2:string}) {",
      "\tthis.$3 = v;",
      "}",
      ""
    ],
    "description": "Property setter"
  },
  "Throw Exception": {
    "prefix": "throw",
    "body": ["throw \"$1\";", "$0"],
    "description": "Throw Exception"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      "\tconst ${3:element} = ${2:array}[${1:index}];",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-Each Loop using =>": {
    "prefix": "foreach =>",
    "body": ["${1:array}.forEach(${2:element} => {", "\t$0", "});"],
    "description": "For-Each Loop using =>"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\tif (${2:object}.hasOwnProperty(${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": ["for (const ${1:iterator} of ${2:object}) {", "\t$0", "}"],
    "description": "For-Of Loop"
  },
  "Function Statement": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:params}:${3:type}) {", "\t$0", "}"],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": ["if (${1:condition}) {", "\t$0", "} else {", "\t", "}"],
    "description": "If-Else Statement"
  },
  "New Statement": {
    "prefix": "new",
    "body": ["const ${1:name} = new ${2:type}(${3:arguments});$0"],
    "description": "New Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "While Statement"
  },
  "Do-While Statement": {
    "prefix": "dowhile",
    "body": ["do {", "\t$0", "} while (${1:condition});"],
    "description": "Do-While Statement"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": ["try {", "\t$0", "} catch (${1:error}) {", "\t", "}"],
    "description": "Try-Catch Statement"
  },
  "Set Timeout Function": {
    "prefix": "settimeout",
    "body": ["setTimeout(() => {", "\t$0", "}, ${1:timeout});"],
    "description": "Set Timeout Function"
  },
  "interface": {
    "prefix": "interface",
    "body": "interface ${1} {\n\t${2}: ${3}\n}"
  },
  "export const": {
    "prefix": "export const",
    "body": "export const ${1}: ${2}"
  },
  "export class": {
    "prefix": "export class",
    "body": "export class ${TM_FILENAME_BASE}{\n\t${1}\n}"
  },
  "export func": {
    "prefix": "export func",
    "body": "export default function ${TM_FILENAME_BASE}{\n\t${1}\n}"
  },
  "export interface": {
    "prefix": "export-interface",
    "body": "export interface ${1:/capitalize} \n{\n}"
  },
  "onSubmit angular": {
    "prefix": "onSubmit angular",
    "body": "onSubmit(val: NgForm){\n\t\tconsole.log(val)\n\t} // import NgForm from @angular/core",
    "description": "onSubmit angular"
  },
  "form regiter angular": {
    "prefix": "form control angular",
    "body": "// import ReactiveFormsModule from '@angular/forms' inside app.module\nform: any;\n\nconstructor(private fb: FormBuilder) {\n\tthis.form = fb.group({\n\t\tusername: ['', [Validators.required]],\n\t})\n}\n\nget username(){\n\treturn this.form.get('username');\n}\n\nonSubmit(): void {\n\tconsole.log(this.form?.value)\n}",
    "description": ""
  },
  "constructor and ngoninit": {
    "prefix": "a-constructor-ngOnInit",
    "body": "constructor(private $1: $2){}\n\nngOnInit() {\n\tthis.$1}",
    "description": "constructor and ngOnInit for dependencies injection"
  },
  "constructor and ngoninit get params route": {
    "prefix": "a-constructor-ngOnInit-get-params",
    "body": "params: any;\n\nconstructor(private route: ActivatedRoute){}\n\nngOnInit() {\n\tthis.route.paramMap.subscribe((param) => {\n\t\tthis.params = param.get('id')\n\t})\n}",
    "description": "constructor and ngOnInit for get params angular"
  },
  "Angular Pipe": {
    "prefix": "a-pipe",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "",
      "@Pipe({",
      "\tname: '${1:selector-name}'",
      "})",
      "",
      "export class ${2:Name}Pipe implements PipeTransform {",
      "\ttransform(value: any, ...args: any[]): any {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Angular pipe"
  },
  "Angular 404 Route Path": {
    "prefix": "a-route-path-404",
    "description": "Angular 404 route path",
    "body": ["{ path: '**', component: ${1:PathNotFoundComponent} },$0"]
  },
  "Angular Eager Route Path": {
    "prefix": "a-route-path-eager",
    "description": "Angular eager route path",
    "body": ["{ path: '${1:path}', component: ${2:Name}Component },$0"]
  },
  "Angular Lazy Route Path": {
    "prefix": "a-route-path-lazy",
    "description": "Angular lazy route path",
    "body": [
      "{",
      "\tpath: '${1:path}', ",
      "\tloadChildren: () => import('${2:lazy-path}').then(m => m.${3:lazy-module})",
      "},$0"
    ]
  },
  "HttpClient.get": {
    "prefix": "a-httpclient-get",
    "description": "Angular HttpClient.get",
    "body": ["return this.httpClient.get('${1:url}');$0"]
  },
  "Angular HttpClient Service": {
    "prefix": "a-service-httpclient",
    "description": "Angular service with HttpClient",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { HttpClient } from '@angular/common/http';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:ServiceName}Service {",
      "\tconstructor(private httpClient: HttpClient) { }",
      "\t$0",
      "}"
    ]
  },
  "Angular HttpInterceptor for Logging": {
    "prefix": "a-http-interceptor-logging",
    "description": "Angular HttpInterceptor for Logging HttpClient",
    "body": [
      "import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';",
      "import { Observable } from 'rxjs';",
      "import { tap } from 'rxjs/operators';",
      "",
      "@Injectable()",
      "export class LogInterceptor implements HttpInterceptor {",
      "\tconstructor() {}",
      "",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\tconst started = Date.now();",
      "\t\treturn next.handle(req).pipe(",
      "\t\t\ttap(event => {",
      "\t\t\t\tif (event instanceof HttpResponse) {",
      "\t\t\t\t\tconst elapsed = Date.now() - started;",
      "\t\t\t\t\tconsole.log(`Request for \\${req.urlWithParams} took \\${elapsed} ms.`);",
      "\t\t\t\t}",
      "\t\t\t})",
      "\t\t);",
      "\t}",
      "}"
    ]
  },
  "Angular HttpInterceptor for Headers": {
    "prefix": "a-http-interceptor-headers",
    "description": "Angular HttpInterceptor for headers HttpClient",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable()",
      "export class HeaderInterceptor implements HttpInterceptor {",
      "\tconstructor() {}",
      "",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\tconst headers = req.headers",
      "\t\t\t.set('Content-Type', 'application/json');",
      "\t\tconst authReq = req.clone({ headers });",
      "\t\treturn next.handle(authReq);",
      "\t}",
      "}"
    ]
  },
  "Angular HttpInterceptor - Empty": {
    "prefix": "a-http-interceptor",
    "description": "Empty Angular HttpInterceptor for HttpClient",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable()",
      "export class ${2:Your}Interceptor implements HttpInterceptor {",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\treturn next.handle(req);",
      "\t}",
      "}"
    ]
  },
  "Output Event": {
    "prefix": "a-output-event",
    "body": ["@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();"],
    "description": "Angular @Output event and emitter"
  },
  "Subscribe": {
    "prefix": "a-subscribe",
    "description": "Angular observable subscribe",
    "body": [
      "this.${1:service}.${2:function}",
      "\t.subscribe(${3:arg} => this.${4:property} = ${3:arg});",
      "$0"
    ]
  },
  "NgRx Store Module": {
    "prefix": "a-ngrx-store-module",
    "description": "NgRx Store Module",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { EffectsModule } from '@ngrx/effects';",
      "import { StoreModule } from '@ngrx/store';",
      "import { StoreDevtoolsModule } from '@ngrx/store-devtools';",
      "import { environment } from '../../environments/environment';",
      "",
      "@NgModule({",
      "  imports: [",
      "    StoreModule.forRoot({}),",
      "    EffectsModule.forRoot([]),",
      "    environment.production ? [] : StoreDevtoolsModule.instrument()",
      "  ]",
      "})",
      "export class $1StoreModule {}"
    ]
  },
  "NgRx Create Action": {
    "prefix": "a-ngrx-create-action",
    "description": "Creates an NgRx Action",
    "body": [
      "export const ${1:action} = createAction('[${2:Source}] ${3:Event}');"
    ]
  },
  "NgRx Create Action w/ Props": {
    "prefix": "a-ngrx-create-action-props",
    "description": "Creates an NgRx Action with Props",
    "body": [
      "export const ${1:action} = createAction('[${2:Source}] ${3:Event}', props<{${4:key}: ${5:type}}>());"
    ]
  },
  "NgRx Create Reducer": {
    "prefix": "a-ngrx-create-reducer",
    "description": "Creates an NgRx Reducer",
    "body": [
      "const ${1:feature}Reducer = createReducer(",
      "\tinitialState,",
      "\ton($1Actions.action, state => ({ ...state, ${2:prop}: ${3:updatedValue} })),",
      ");",
      "",
      "export function reducer(state: State | undefined, action: Action) {",
      "\treturn $1Reducer(state, action);",
      "}"
    ]
  },
  "NgRx Create Effect": {
    "prefix": "a-ngrx-create-effect",
    "description": "Creates an NgRx Effect",
    "body": [
      "${1:effectName}$ = createEffect(() => {",
      "\treturn this.actions$.pipe(",
      "\t\t\tofType(${2:action}),",
      "\t\t\t/** An EMPTY observable only emits completion. Replace with your own observable stream */",
      "\t\t\t${3:operator}(() => ${4:EMPTY}));",
      "});"
    ]
  },
  "NgRx Create Effect for API Call": {
    "prefix": "a-ngrx-create-effect-api",
    "description": "Creates an NgRx Effect Scaffolded for API Call",
    "body": [
      "${1:effectName}$ = createEffect(() => {",
      "\treturn this.actions$.pipe(",
      "\t\t\tofType(${2:Feature}Actions.${3:action}),",
      "\t\t\t${4:operator}(() =>",
      "\t\t\t\t${5:apiSource}.pipe(",
      "\t\t\t\t\tmap(data => $2Actions.$3Success({ data })),",
      "\t\t\t\t\tcatchError(error => of($2Actions.$3Failure({ error }))))",
      "\t\t\t\t),",
      "\t);",
      "});"
    ]
  },
  "NgRx Create Selector": {
    "prefix": "a-ngrx-create-selector",
    "description": "Creates an NgRx Selector",
    "body": [
      "export const select${1:Feature}${2:Property} = createSelector(",
      "\tselect$1,",
      "\t(state: $1State) => state.${3:property}",
      ");"
    ]
  },
  "NgRx Create Selector w/ Props": {
    "prefix": "a-ngrx-create-selector-props",
    "description": "Creates an NgRx Selector using props",
    "body": [
      "export const select${1:Feature}${2:Property} = createSelector(",
      "\tselect$1,",
      "\t(state: $1State, props) => ${3:selectLogic}",
      ");"
    ]
  },
  "NgRx Data Import Entity Data Module": {
    "prefix": "a-ngrx-data-entity-data-module-import",
    "description": "Import NgRx Entity Data Module",
    "body": ["EntityDataModule.forRoot(${1:entityConfig}),"]
  },
  "NgRx Data Entity Metadata": {
    "prefix": "a-ngrx-data-entity-metadata",
    "description": "NgRx Data Entity Metadata",
    "body": [
      "import { EntityMetadataMap } from '@ngrx/data';",
      "",
      "const entityMetadata: EntityMetadataMap = {",
      "  ${1:Model1}: {},${0}",
      "};",
      "",
      "export const entityConfig = {",
      "  entityMetadata",
      "};"
    ]
  },
  "NgRx Data Entity Collection Data Service": {
    "prefix": "a-ngrx-data-entity-collection-data-service",
    "description": "NgRx Data Entity Collection Data Service",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import {",
      "  EntityCollectionServiceBase,",
      "  EntityCollectionServiceElementsFactory",
      "} from '@ngrx/data';",
      "import { ${1:Model} } from '${2:../core}';",
      "",
      "@Injectable({ providedIn: ${3:'root'} })",
      "export class ${1:Model}Service extends EntityCollectionServiceBase<${1:Model}> {",
      "  constructor(serviceElementsFactory: EntityCollectionServiceElementsFactory) {",
      "    super('${1:Model}', serviceElementsFactory);",
      "  }",
      "}"
    ]
  },
  "TrackBy Function": {
    "prefix": "a-trackby",
    "description": "TrackBy Function",
    "body": [
      "${1:trackBy}(index: number, ${2:name}: ${3:model}): ${4:number} {",
      "  return ${2:name}${5:.id};$0",
      "}"
    ]
  }
}
